buildscript {
	repositories {
		maven { url = 'https://maven.minecraftforge.net/' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7.+'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

def minecraftVersion = "1.18.2"
def modVersion = "1.1"

version = "${minecraftVersion}-${modVersion}"
group = 'com.kirdow.mentioned'
archivesBaseName = 'Mentioned-Forge'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
	main {
		java {
			exclude 'com/kirdow/mentioned/util/reflect'
		}

		resources {
			exclude 'fabric.mod.json'
		}
	}
}

mixin {
	add sourceSets.main, 'ktnmentioned.mixins.refmap.json'
	config 'ktnmentioned.mixins.json'
}

minecraft {
	mappings channel: 'official', version: '1.18.2'

	runs {
		client {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				ktnmentioned {
					source sourceSets.main
				}
			}
		}

		server {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				ktnmentioned {
					source sourceSets.main
				}
			}
		}
	}
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
	manifest.attributes([
	        "Specification-Title": "MentionedMod",
			"Specification-Vendor": "Kirdow",
			"Specification-Version": "${project.version}",
			"Implementation-Title": project.name,
			"Implementation-Version": "${project.version}",
			"Implementation-Vendor": "Kirdow",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	])

	finalizedBy 'reobfJar'
}

task srcJar(type: Jar) {
	archiveClassifier.set("src")
	from sourceSets.main.allJava
}

artifacts {
	archives srcJar
}